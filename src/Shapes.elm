module Shapes exposing (Shape, acorn, baker, hwss, koksGalaxy, makeShape, pDecathlon, phoenix, pulsar)

import Array2D exposing (..)
import Shared exposing (CellState(..), Grid, Position)


type alias Shape =
    List Position


makeShape : Position -> Shape -> Grid -> Grid
makeShape offset shape grid =
    let
        ( offsetX, offsetY ) =
            offset

        aliveCoordinates =
            List.map (\( x, y ) -> ( x + offsetX, y + offsetY )) shape
    in
    Array2D.indexedMap
        (\i j cell ->
            { cell
                | life =
                    if List.member ( i, j ) aliveCoordinates then
                        Alive

                    else
                        Dead
            }
        )
        grid


phoenix : Shape
phoenix =
    [ ( 0, 0 )
    , ( 1, 0 )
    , ( 1, 2 )
    , ( 3, 3 )
    , ( 3, 4 )
    , ( 5, 3 )
    , ( 6, 1 )
    , ( 7, 1 )
    , ( 6, -1 )
    , ( 4, -2 )
    , ( 4, -3 )
    , ( 2, -2 )
    ]


baker : Shape
baker =
    [ ( -1, 1 )
    , ( -1, 2 )
    , ( 0, 2 )
    , ( -1, 3 )
    , ( -2, 4 )
    , ( -3, 5 )
    , ( -4, 6 )
    , ( -5, 7 )
    , ( -6, 8 )
    , ( -7, 9 )
    , ( -8, 10 )
    , ( -9, 11 )
    , ( -10, 12 )
    , ( -11, 13 )
    , ( -12, 14 )
    , ( -13, 15 )
    , ( -13, 16 )
    , ( -12, 16 )
    ]


koksGalaxy : Shape
koksGalaxy =
    [ ( 0, 0 )
    , ( 0, 1 )
    , ( 1, 0 )
    , ( 1, 1 )
    , ( 2, 0 )
    , ( 2, 1 )
    , ( 3, 0 )
    , ( 3, 1 )
    , ( 4, 0 )
    , ( 4, 1 )
    , ( 5, 0 )
    , ( 5, 1 )
    , ( 0, 3 )
    , ( 0, 4 )
    , ( 0, 5 )
    , ( 0, 6 )
    , ( 0, 7 )
    , ( 0, 8 )
    , ( 1, 3 )
    , ( 1, 4 )
    , ( 1, 5 )
    , ( 1, 6 )
    , ( 1, 7 )
    , ( 1, 8 )
    , ( 7, 0 )
    , ( 7, 1 )
    , ( 7, 2 )
    , ( 7, 3 )
    , ( 7, 4 )
    , ( 7, 5 )
    , ( 8, 0 )
    , ( 8, 1 )
    , ( 8, 2 )
    , ( 8, 3 )
    , ( 8, 4 )
    , ( 8, 5 )
    , ( 3, 7 )
    , ( 4, 7 )
    , ( 5, 7 )
    , ( 6, 7 )
    , ( 7, 7 )
    , ( 8, 7 )
    , ( 3, 8 )
    , ( 4, 8 )
    , ( 5, 8 )
    , ( 6, 8 )
    , ( 7, 8 )
    , ( 8, 8 )
    ]


hwss : Shape
hwss =
    [ ( 0, 0 )
    , ( 0, 1 )
    , ( 1, -1 )
    , ( 1, 0 )
    , ( 1, 2 )
    , ( 1, 3 )
    , ( 1, 4 )
    , ( 1, 5 )
    , ( 2, 0 )
    , ( 2, 1 )
    , ( 2, 2 )
    , ( 2, 3 )
    , ( 2, 4 )
    , ( 2, 5 )
    , ( 3, 1 )
    , ( 3, 2 )
    , ( 3, 3 )
    , ( 3, 4 )
    ]


pulsar : Shape
pulsar =
    [ ( 0, 0 )
    , ( 0, 1 )
    , ( 0, 2 )
    , ( 5, 0 )
    , ( 5, 1 )
    , ( 5, 2 )
    , ( 7, 0 )
    , ( 7, 1 )
    , ( 7, 2 )
    , ( 12, 0 )
    , ( 12, 1 )
    , ( 12, 2 )
    , ( 0, 6 )
    , ( 0, 7 )
    , ( 0, 8 )
    , ( 5, 6 )
    , ( 5, 7 )
    , ( 5, 8 )
    , ( 7, 6 )
    , ( 7, 7 )
    , ( 7, 8 )
    , ( 12, 6 )
    , ( 12, 7 )
    , ( 12, 8 )
    , ( 2, -2 )
    , ( 3, -2 )
    , ( 4, -2 )
    , ( 2, 3 )
    , ( 3, 3 )
    , ( 4, 3 )
    , ( 8, -2 )
    , ( 9, -2 )
    , ( 10, -2 )
    , ( 8, 3 )
    , ( 9, 3 )
    , ( 10, 3 )
    , ( 2, 5 )
    , ( 3, 5 )
    , ( 4, 5 )
    , ( 2, 10 )
    , ( 3, 10 )
    , ( 4, 10 )
    , ( 8, 5 )
    , ( 9, 5 )
    , ( 10, 5 )
    , ( 8, 10 )
    , ( 9, 10 )
    , ( 10, 10 )
    ]


pDecathlon : Shape
pDecathlon =
    [ ( 0, 0 )
    , ( 0, 1 )
    , ( 0, 2 )
    , ( 1, 0 )
    , ( 1, 2 )
    , ( 2, 0 )
    , ( 2, 1 )
    , ( 2, 2 )
    , ( 3, 0 )
    , ( 3, 1 )
    , ( 3, 2 )
    , ( 4, 0 )
    , ( 4, 1 )
    , ( 4, 2 )
    , ( 5, 0 )
    , ( 5, 1 )
    , ( 5, 2 )
    , ( 6, 0 )
    , ( 6, 2 )
    , ( 7, 0 )
    , ( 7, 1 )
    , ( 7, 2 )
    ]


acorn : Shape
acorn =
    [ ( 0, 0 )
    , ( 2, 0 )
    , ( 2, -1 )
    , ( 2, 3 )
    , ( 2, 4 )
    , ( 2, 5 )
    , ( 1, 2 )
    ]
